{"version":3,"file":"static/js/695.723d8d6e.chunk.js","mappings":"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","sources":["components/ListItem/ListItem.js","redux/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport {deleteContact } from \"redux/operations\";\nimport { useDispatch } from \"react-redux\";\nimport { Text, Button } from '@chakra-ui/react'\n\n\nexport const ContactItem = ({ contact: { name, number,id } }) => {\n  const dispatch = useDispatch();\n  const onDeleteContact = () => dispatch(deleteContact(id));\n\n  \n  return (\n    <div>\n       <Text as='samp'>{name} {number}</Text>      \n      <Button  ml='2' colorScheme='teal' size='xs'\n          type=\"button\"\n          onClick={onDeleteContact}\n        >Delete</Button>\n    </div>\n  );\n};\n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number:PropTypes.string.isRequired,\n      }).isRequired\n}","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = filter => filter.filter;\n\nexport const visibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n      return contacts.contacts.filter(contact =>\n        contact?.name?.toLowerCase()?.includes(filter),\n      );\n  }\n);\n\n","// import PropTypes from 'prop-types';\nimport { ContactItem } from '../ListItem/ListItem';\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/operations\";\nimport { visibleContacts } from \"redux/selectors\";\nimport { ListItem,UnorderedList} from '@chakra-ui/react'\n\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(visibleContacts);\n  \n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n        <UnorderedList p='4'>{contacts.map((contact) => (\n                <ListItem key={contact.id}> {\n                  <ContactItem contact={contact}/>}\n                </ListItem>\n              ))\n            }\n      </UnorderedList>  \n        );\n    \n}\n","\nimport styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n`;\n\nexport const Input = styled.input`\n  margin: 10px;\n`;\n\nexport const Form = styled.form`\n  padding: 30px;\n  border: 1px solid black;\n`;","\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { Form } from './ContactForm.styled';\nimport { addContact } from \"redux/operations\";\nimport { selectContacts } from \"redux/selectors\";\nimport Notiflix from 'notiflix';\nimport { FormLabel, Input, Button} from '@chakra-ui/react'\n\n\nexport const ContactForm = () => {\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    \n  contacts.contacts.filter(contact => contact.name.toLowerCase()===(form.elements.name.value.toLowerCase())).length>0 ?\n    Notiflix.Notify.failure(`${form.elements.name.value} is already in phonebook`):  \n    dispatch(addContact({name:form.elements.name.value,number:form.elements.number.value})) &&  form.reset();\n   \n  };\n\n  return (\n    <Form  onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <Input\n         type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          \n          />\n      </FormLabel>\n      <FormLabel>\n        Phone\n        <Input\n         type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n         \n          />\n      </FormLabel>\n      <Button colorScheme='teal' type=\"submit\">Add contact</Button>\n    </Form>\n  );\n\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\nimport { Grid, GridItem,Spinner  } from '@chakra-ui/react'\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Grid templateColumns='repeat(2, 2fr)' gap={6}>\n        <GridItem w='100%'><ContactForm /> <div>{isLoading && <Spinner mt='4' color='teal'/>}</div></GridItem> \n        <GridItem w='100%'><ContactList /></GridItem>\n        </Grid>\n    </>\n  );\n}\n\n"],"names":["ContactItem","contact","name","number","id","dispatch","useDispatch","as","ml","colorScheme","size","type","onClick","deleteContact","selectContacts","state","contacts","selectIsLoading","isLoading","visibleContacts","createSelector","filter","toLowerCase","includes","ContactList","useSelector","useEffect","fetchContacts","p","map","Form","styled","ContactForm","onSubmit","event","preventDefault","form","target","elements","value","length","Notiflix","addContact","reset","pattern","title","required","Contacts","Helmet","templateColumns","gap","w","mt","color"],"sourceRoot":""}